type Me {
  id: ID! @goField(forceResolver: true)
  name: String!
  avatarUrl: String!
}

type GlobalUser {
  id: ID! @goField(forceResolver: true)
  name: String!
  avatarUrl: String!
  joined: Room @goField(forceResolver: true)
}

type RoomUser {
  id: ID! @goField(forceResolver: true)
  name: String!
  avatarUrl: String!
  x: Int!
  y: Int!
  lastMessage: Message
  balloonPosition: BalloonPosition!
}

input MoveInput {
  roomId: ID!
  x: Int!
  y: Int!
}

input RemoveLastMessageInput {
  roomId: ID!
}

type RemoveLastMessagePayload {
  roomUser: RoomUser
}

input ChangeBalloonPositionInput {
  roomId: ID!
  balloonPosition: BalloonPosition!
}

type ChangeBalloonPositionPayload {
  roomUser: RoomUser
}

type MovePayload {
  roomUser: RoomUser!
}

enum BalloonPosition {
  TOP_LEFT
  TOP_RIGHT
  BOTTOM_LEFT
  BOTTOM_RIGHT
}

"""
ユーザーのオンライン・オフライン状態の変更を取得するためのイベントタイプ
"""
union GlobalUserEvent = OnlinedPayload | OfflinedPayload
type OnlinedPayload {
  globalUser: GlobalUser!
}
type OfflinedPayload {
  userId: ID! @goField(forceResolver: true)
}


"""
ルーム内のユーザーの行動を取得するためのイベントタイプ
"""
union RoomUserEvent =
  JoinedPayload |
  ExitedPayload |
  MovedPayload |
  SentMassagePayload |
  RemovedLastMessagePayload |
  ChangedBalloonPositionPayload

type JoinedPayload {
  roomUser: RoomUser!
}
type ExitedPayload {
  userId: ID! @goField(forceResolver: true)
}
type MovedPayload {
  roomUser: RoomUser!
}
type SentMassagePayload {
  roomUser: RoomUser!
}
type RemovedLastMessagePayload {
  roomUser: RoomUser!
}
type ChangedBalloonPositionPayload {
  roomUser: RoomUser!
}
