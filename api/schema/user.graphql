type Me {
  id: ID!
  displayName: String!
  avatarUrl: String!
}

type User {
  id: ID!
  displayName: String!
  avatarUrl: String!
  x: Int!
  y: Int!
}

type OnlineUserStatus {
  id: ID!
  displayName: String!
  avatarUrl: String!
}

type OfflineUserStatus {
  id: ID!
}

union UserStatus = OnlineUserStatus | OfflineUserStatus

type JoinedUser {
  id: ID!
  displayName: String!
  avatarUrl: String!
  x: Int!
  y: Int!
}

type MovedUser {
  id: ID!
  x: Int!
  y: Int!
}

type ExitedUser {
  id: ID!
}

union UserEvent = MovedUser | ExitedUser | JoinedUser

input MoveInput {
  # TODO: roomIdはcookieに持たせるようにする
  roomId: ID!
  x: Int!
  y: Int!
}

extend type RoomDetail {
  users: [User!]!
}

extend type Query {
  me: Me!
  onlineUsers: [OnlineUserStatus!]!
}

extend type Mutation {
  move(input: MoveInput!): MovedUser!
}

extend type Subscription {
  # joinRoom
  # 部屋へ入ったら自分自身の情報を取得
  # このSubscription内で退出もハンドリングする
  joinRoom(roomID: ID!): User!
  # subUserEvent ルーム内のユーザー操作を配信
  subUserEvent(roomId: ID!): UserEvent!
  # changedUserStatus アプリケーションへのオンライン/オフラインのユーザー状態を配信
  changedUserStatus: UserStatus!
}
