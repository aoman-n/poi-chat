extend type Room {
  users: [RoomUser!]!
}

extend type Query {
  me: Me!
  globalUsers: [GlobalUser!]!
}

extend type Mutation {
  move(input: MoveInput!): MovePayload!
}

extend type Subscription {
  # ここに接続することで、グローバルのオンライン状態を同時に管理する
  actedGlobalUserEvent: GlobalUserEvent!
  # ここに接続することで、roomに入室している状態も管理する
  actedRoomUserEvent(roomId: ID!): RoomUserEvent!
}

input MoveInput {
  roomId: ID!
  x: Int!
  y: Int!
}

type MovePayload {
  roomUser: RoomUser!
}

type Me {
  id: ID!
  name: String!
  avatarUrl: String!
}

type RoomUser {
  id: ID!
  name: String!
  avatarUrl: String!
  x: Int!
  y: Int!
  lastMessage: Message
}

type GlobalUser {
  id: ID!
  name: String!
  avatarUrl: String!
}

# -------------------------------
# GlobalUserEvent
union GlobalUserEvent = OnlinedPayload | OfflinedPayload
type OnlinedPayload {
  globalUser: GlobalUser!
}
type OfflinedPayload {
  userId: ID!
}

# -------------------------------
# RoomUserEvent
union RoomUserEvent = JoinedPayload | ExitedPayload | MovedPayload | SentMassagePayload
type JoinedPayload {
  roomUser: RoomUser!
}
type ExitedPayload {
  userId: ID!
}
type MovedPayload {
  roomUser: RoomUser!
}
type SentMassagePayload {
  roomUser: RoomUser!
}
