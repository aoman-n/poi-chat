extend type RoomDetail {
  users: [User!]!
}

extend type Query {
  me: Me!
  onlineUsers: [OnlineUserStatus!]!
}

extend type Mutation {
  move(input: MoveInput!): MovePayload!
}

extend type Subscription {
  # ここに接続することで、グローバルのオンライン状態を同時に管理する
  actedGlobalUserEvent: GlobalUserEvent!
  # ここに接続することで、roomに入室している状態も管理する
  actedRoomUserEvent(roomId: ID!): RoomUserEvent!
}

input MoveInput {
  # TODO: roomIdはcookieに持たせるようにする
  roomId: ID!
  x: Int!
  y: Int!
}

type MovePayload {
  userId: ID!
  x: Int!
  y: Int!
}

type Me {
  id: ID!
  name: String!
  avatarUrl: String!
}

type User {
  id: ID!
  name: String!
  avatarUrl: String!
  x: Int!
  y: Int!
}

type OnlineUserStatus {
  id: ID!
  name: String!
  avatarUrl: String!
}

# -------------------------------
# GlobalUserEvent
union GlobalUserEvent = Onlined | Offlined
type Onlined {
  userId: ID!
  name: String!
  avatarUrl: String!
}
type Offlined {
  userId: ID!
}

# -------------------------------
# RoomUserEvent
union RoomUserEvent = Joined | Exited | Moved | SendedMassage
type Joined {
  userId: ID!
  name: String!
  avatarUrl: String!
  x: Int!
  y: Int!
}
type Exited {
  userId: ID!
}
type Moved {
  userId: ID!
  x: Int!
  y: Int!
}
type SendedMassage {
  userId: ID!
  message: String!
}
