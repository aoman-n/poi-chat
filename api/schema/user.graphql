extend type Room {
  """
  ルーム内のユーザー一覧を取得
  """
  users: [RoomUser!]!
}

extend type Query {
  """
  ログイン中のユーザーが自身の情報を取得
  """
  me: Me!

  """
  本アプリケーションにオンラインしているユーザー一覧を取得
  """
  globalUsers: [GlobalUser!]!
}

extend type Mutation {
  """
  ルーム内ユーザーのポジション移動
  """
  move(input: MoveInput!): MovePayload!

  """
  ルーム内ユーザーの吹き出し削除
  """
  removeLastMessage(input: RemoveLastMessageInput!): RemoveLastMessagePayload!

  """
  ルーム内ユーザーの吹き出し位置変更
  """
  changeBalloonPosition(input: ChangeBalloonPositionInput!): ChangeBalloonPositionPayload!
}

extend type Subscription {
  """
  ユーザーのオンラインステータスの更新を待ち受けるサブスクリプション。
  このサブスクリプションを待ち受けると同時に自身をオンライン状態にする。
  """
  actedGlobalUserEvent: GlobalUserEvent

  """
  ルーム内ユーザーのアクションを待ち受けるサブスクリプション。
  このサブスクリプションを待ち受けると同時に自身をルームに入室させる。
  """
  actedRoomUserEvent(roomId: ID!): RoomUserEvent
}

input MoveInput {
  roomId: ID!
  x: Int!
  y: Int!
}

input RemoveLastMessageInput {
  roomId: ID!
}

type RemoveLastMessagePayload {
  roomUser: RoomUser
}

input ChangeBalloonPositionInput {
  roomId: ID!
  balloonPosition: BalloonPosition!
}

type ChangeBalloonPositionPayload {
  roomUser: RoomUser
}

type MovePayload {
  roomUser: RoomUser!
}

type Me {
  id: ID!
  name: String!
  avatarUrl: String!
}

type RoomUser {
  id: ID!
  name: String!
  avatarUrl: String!
  x: Int!
  y: Int!
  lastMessage: Message
  balloonPosition: BalloonPosition!
}

enum BalloonPosition {
  TOP_LEFT
  TOP_RIGHT
  BOTTOM_LEFT
  BOTTOM_RIGHT
}

type GlobalUser {
  id: ID!
  name: String!
  avatarUrl: String!
  joined: Room
}

"""
ユーザーのオンライン・オフライン状態の変更を取得するためのイベントタイプ
"""
union GlobalUserEvent = OnlinedPayload | OfflinedPayload
type OnlinedPayload {
  globalUser: GlobalUser!
}
type OfflinedPayload {
  userId: ID!
}


"""
ルーム内のユーザーの行動を取得するためのイベントタイプ
"""
union RoomUserEvent =
  JoinedPayload |
  ExitedPayload |
  MovedPayload |
  SentMassagePayload |
  RemovedLastMessagePayload |
  ChangedBalloonPositionPayload

type JoinedPayload {
  roomUser: RoomUser!
}
type ExitedPayload {
  userId: ID!
}
type MovedPayload {
  roomUser: RoomUser!
}
type SentMassagePayload {
  roomUser: RoomUser!
}
type RemovedLastMessagePayload {
  roomUser: RoomUser!
}
type ChangedBalloonPositionPayload {
  roomUser: RoomUser!
}
