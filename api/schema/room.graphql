type Room implements Node {
  id: ID! @goField(forceResolver: true)
  name: String!
  bgColor: String!
  bgUrl: String!
  createdAt: Time!
  totalUserCount: Int! @goField(forceResolver: true)
  totalMessageCount: Int! @goField(forceResolver: true)
  messages(last: Int, before: String): MessageConnection! @goField(forceResolver: true)
  users: [RoomUser!]! @goField(forceResolver: true)
}

type RoomEdge implements Edge {
  cursor: String!
  node: Room!
}

type RoomConnection implements Connection {
  pageInfo: PageInfo!
  edges: [RoomEdge!]!
  nodes: [Room!]!
  roomCount: Int!
}

input CreateRoomInput {
  name: String!
  bgUrl: String
  bgColor: String
}

enum RoomOrderField {
  LATEST
  DESC_USER_COUNT
}

type CreateRoomPayload {
  room: Room!
}

type RoomUser {
  id: ID! @goField(forceResolver: true)
  user: User! @goField(forceResolver: true)
  x: Int!
  y: Int!
  lastMessage: Message
  balloonPosition: BalloonPosition!
}

input MoveInput {
  roomId: ID!
  x: Int!
  y: Int!
}

input RemoveLastMessageInput {
  roomId: ID!
}

type RemoveLastMessagePayload {
  roomUser: RoomUser
}

input ChangeBalloonPositionInput {
  roomId: ID!
  balloonPosition: BalloonPosition!
}

type ChangeBalloonPositionPayload {
  roomUser: RoomUser
}

type MovePayload {
  roomUser: RoomUser!
}

"""
ルーム内のユーザーの行動を取得するためのイベントタイプ
"""
union RoomUserEvent =
  JoinedPayload |
  ExitedPayload |
  MovedPayload |
  SentMassagePayload |
  RemovedLastMessagePayload |
  ChangedBalloonPositionPayload

type JoinedPayload {
  roomUser: RoomUser!
}
type ExitedPayload {
  userId: ID! @goField(forceResolver: true)
}
type MovedPayload {
  roomUser: RoomUser!
}
type SentMassagePayload {
  roomUser: RoomUser!
}
type RemovedLastMessagePayload {
  roomUser: RoomUser!
}
type ChangedBalloonPositionPayload {
  roomUser: RoomUser!
}
