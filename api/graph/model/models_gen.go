// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Connection interface {
	IsConnection()
}

type Edge interface {
	IsEdge()
}

// ユーザーのオンライン・オフライン状態の変更を取得するためのイベントタイプ
type GlobalUserEvent interface {
	IsGlobalUserEvent()
}

type Node interface {
	IsNode()
}

// ルーム内のユーザーの行動を取得するためのイベントタイプ
type RoomUserEvent interface {
	IsRoomUserEvent()
}

type ChangeBalloonPositionInput struct {
	RoomID          string          `json:"roomId"`
	BalloonPosition BalloonPosition `json:"balloonPosition"`
}

type ChangeBalloonPositionPayload struct {
	RoomUser *RoomUser `json:"roomUser"`
}

type ChangedBalloonPositionPayload struct {
	RoomUser *RoomUser `json:"roomUser"`
}

func (ChangedBalloonPositionPayload) IsRoomUserEvent() {}

type CreateRoomInput struct {
	Name    string  `json:"name"`
	BgURL   *string `json:"bgUrl"`
	BgColor *string `json:"bgColor"`
}

type CreateRoomPayload struct {
	Room *Room `json:"room"`
}

type ExitedPayload struct {
	UserID string `json:"userId"`
}

func (ExitedPayload) IsRoomUserEvent() {}

type GlobalUser struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	AvatarURL string `json:"avatarUrl"`
	Joined    *Room  `json:"joined"`
}

type JoinedPayload struct {
	RoomUser *RoomUser `json:"roomUser"`
}

func (JoinedPayload) IsRoomUserEvent() {}

type Me struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	AvatarURL string `json:"avatarUrl"`
}

type Message struct {
	ID            string    `json:"id"`
	UserID        string    `json:"userId"`
	UserName      string    `json:"userName"`
	UserAvatarURL string    `json:"userAvatarUrl"`
	Body          string    `json:"body"`
	CreatedAt     time.Time `json:"createdAt"`
}

func (Message) IsNode() {}

type MessageConnection struct {
	PageInfo     *PageInfo      `json:"pageInfo"`
	Edges        []*MessageEdge `json:"edges"`
	Nodes        []*Message     `json:"nodes"`
	MessageCount int            `json:"messageCount"`
}

func (MessageConnection) IsConnection() {}

type MessageEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Message `json:"node"`
}

func (MessageEdge) IsEdge() {}

type MoveInput struct {
	RoomID string `json:"roomId"`
	X      int    `json:"x"`
	Y      int    `json:"y"`
}

type MovePayload struct {
	RoomUser *RoomUser `json:"roomUser"`
}

type MovedPayload struct {
	RoomUser *RoomUser `json:"roomUser"`
}

func (MovedPayload) IsRoomUserEvent() {}

type OfflinedPayload struct {
	UserID string `json:"userId"`
}

func (OfflinedPayload) IsGlobalUserEvent() {}

type OnlinedPayload struct {
	GlobalUser *GlobalUser `json:"globalUser"`
}

func (OnlinedPayload) IsGlobalUserEvent() {}

type PageInfo struct {
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
}

type PaginationInput struct {
	First  *int    `json:"first"`
	After  *string `json:"after"`
	Last   *int    `json:"last"`
	Before *string `json:"before"`
}

type RemoveLastMessageInput struct {
	RoomID string `json:"roomId"`
}

type RemoveLastMessagePayload struct {
	RoomUser *RoomUser `json:"roomUser"`
}

type RemovedLastMessagePayload struct {
	RoomUser *RoomUser `json:"roomUser"`
}

func (RemovedLastMessagePayload) IsRoomUserEvent() {}

type Room struct {
	ID                string             `json:"id"`
	Name              string             `json:"name"`
	BgColor           string             `json:"bgColor"`
	BgURL             string             `json:"bgUrl"`
	CreatedAt         time.Time          `json:"createdAt"`
	TotalUserCount    int                `json:"totalUserCount"`
	TotalMessageCount int                `json:"totalMessageCount"`
	Messages          *MessageConnection `json:"messages"`
	Users             []*RoomUser2       `json:"users"`
}

func (Room) IsNode() {}

type RoomConnection struct {
	PageInfo  *PageInfo   `json:"pageInfo"`
	Edges     []*RoomEdge `json:"edges"`
	Nodes     []*Room     `json:"nodes"`
	RoomCount int         `json:"roomCount"`
}

func (RoomConnection) IsConnection() {}

type RoomEdge struct {
	Cursor string `json:"cursor"`
	Node   *Room  `json:"node"`
}

func (RoomEdge) IsEdge() {}

type RoomUser struct {
	ID              string          `json:"id"`
	Name            string          `json:"name"`
	AvatarURL       string          `json:"avatarUrl"`
	X               int             `json:"x"`
	Y               int             `json:"y"`
	LastMessage     *Message        `json:"lastMessage"`
	BalloonPosition BalloonPosition `json:"balloonPosition"`
}

type RoomUser2 struct {
	ID     string          `json:"id"`
	User   *User           `json:"user"`
	Status *RoomUserStatus `json:"status"`
}

type RoomUserStatus struct {
	X               int             `json:"x"`
	Y               int             `json:"y"`
	LastMessage     *Message        `json:"lastMessage"`
	BalloonPosition BalloonPosition `json:"balloonPosition"`
}

type SendMassagePaylaod struct {
	Message *Message `json:"message"`
}

type SendMessageInput struct {
	RoomID string `json:"roomID"`
	Body   string `json:"body"`
}

type SentMassagePayload struct {
	RoomUser *RoomUser `json:"roomUser"`
}

func (SentMassagePayload) IsRoomUserEvent() {}

type User struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	AvatarURL string `json:"avatarUrl"`
	//  ルームに入室していなかったらnull
	JoinedRoom *Room `json:"joinedRoom"`
}

type BalloonPosition string

const (
	BalloonPositionTopLeft     BalloonPosition = "TOP_LEFT"
	BalloonPositionTopRight    BalloonPosition = "TOP_RIGHT"
	BalloonPositionBottomLeft  BalloonPosition = "BOTTOM_LEFT"
	BalloonPositionBottomRight BalloonPosition = "BOTTOM_RIGHT"
)

var AllBalloonPosition = []BalloonPosition{
	BalloonPositionTopLeft,
	BalloonPositionTopRight,
	BalloonPositionBottomLeft,
	BalloonPositionBottomRight,
}

func (e BalloonPosition) IsValid() bool {
	switch e {
	case BalloonPositionTopLeft, BalloonPositionTopRight, BalloonPositionBottomLeft, BalloonPositionBottomRight:
		return true
	}
	return false
}

func (e BalloonPosition) String() string {
	return string(e)
}

func (e *BalloonPosition) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BalloonPosition(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BalloonPosition", str)
	}
	return nil
}

func (e BalloonPosition) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RoomOrderField string

const (
	RoomOrderFieldLatest        RoomOrderField = "LATEST"
	RoomOrderFieldDescUserCount RoomOrderField = "DESC_USER_COUNT"
)

var AllRoomOrderField = []RoomOrderField{
	RoomOrderFieldLatest,
	RoomOrderFieldDescUserCount,
}

func (e RoomOrderField) IsValid() bool {
	switch e {
	case RoomOrderFieldLatest, RoomOrderFieldDescUserCount:
		return true
	}
	return false
}

func (e RoomOrderField) String() string {
	return string(e)
}

func (e *RoomOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoomOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoomOrderField", str)
	}
	return nil
}

func (e RoomOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
