// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/room/repository.go

// Package room is a generated GoMock package.
package room

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	user "github.com/laster18/poi/api/src/domain/user"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockRepository) Count(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRepositoryMockRecorder) Count(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRepository)(nil).Count), ctx)
}

// CountMessageByRoomIDs mocks base method.
func (m *MockRepository) CountMessageByRoomIDs(ctx context.Context, roomIDs []int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMessageByRoomIDs", ctx, roomIDs)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMessageByRoomIDs indicates an expected call of CountMessageByRoomIDs.
func (mr *MockRepositoryMockRecorder) CountMessageByRoomIDs(ctx, roomIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMessageByRoomIDs", reflect.TypeOf((*MockRepository)(nil).CountMessageByRoomIDs), ctx, roomIDs)
}

// CountUserByRoomIDs mocks base method.
func (m *MockRepository) CountUserByRoomIDs(ctx context.Context, roomIDs []int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserByRoomIDs", ctx, roomIDs)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserByRoomIDs indicates an expected call of CountUserByRoomIDs.
func (mr *MockRepositoryMockRecorder) CountUserByRoomIDs(ctx, roomIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserByRoomIDs", reflect.TypeOf((*MockRepository)(nil).CountUserByRoomIDs), ctx, roomIDs)
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, room *Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, room)
}

// DeleteUserStatus mocks base method.
func (m *MockRepository) DeleteUserStatus(ctx context.Context, status *UserStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserStatus indicates an expected call of DeleteUserStatus.
func (mr *MockRepositoryMockRecorder) DeleteUserStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserStatus", reflect.TypeOf((*MockRepository)(nil).DeleteUserStatus), ctx, status)
}

// GetAll mocks base method.
func (m *MockRepository) GetAll(ctx context.Context) ([]*Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(ctx context.Context, id int) (*Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockRepository) GetByName(ctx context.Context, name string) (*Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockRepositoryMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockRepository)(nil).GetByName), ctx, name)
}

// GetUserStatus mocks base method.
func (m *MockRepository) GetUserStatus(ctx context.Context, roomID int, userUID string) (*UserStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStatus", ctx, roomID, userUID)
	ret0, _ := ret[0].(*UserStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStatus indicates an expected call of GetUserStatus.
func (mr *MockRepositoryMockRecorder) GetUserStatus(ctx, roomID, userUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStatus", reflect.TypeOf((*MockRepository)(nil).GetUserStatus), ctx, roomID, userUID)
}

// GetUserStatuses mocks base method.
func (m *MockRepository) GetUserStatuses(ctx context.Context, roomID int) ([]*UserStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStatuses", ctx, roomID)
	ret0, _ := ret[0].([]*UserStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStatuses indicates an expected call of GetUserStatuses.
func (mr *MockRepositoryMockRecorder) GetUserStatuses(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStatuses", reflect.TypeOf((*MockRepository)(nil).GetUserStatuses), ctx, roomID)
}

// GetUsers mocks base method.
func (m *MockRepository) GetUsers(ctx context.Context, roomID int) ([]*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, roomID)
	ret0, _ := ret[0].([]*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockRepositoryMockRecorder) GetUsers(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockRepository)(nil).GetUsers), ctx, roomID)
}

// List mocks base method.
func (m *MockRepository) List(ctx context.Context, req *ListReq) (*ListResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, req)
	ret0, _ := ret[0].(*ListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), ctx, req)
}

// SaveUserStatus mocks base method.
func (m *MockRepository) SaveUserStatus(ctx context.Context, status *UserStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserStatus indicates an expected call of SaveUserStatus.
func (mr *MockRepositoryMockRecorder) SaveUserStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserStatus", reflect.TypeOf((*MockRepository)(nil).SaveUserStatus), ctx, status)
}
