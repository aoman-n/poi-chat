// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/user/repository.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteStatus mocks base method.
func (m *MockRepository) DeleteStatus(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatus", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatus indicates an expected call of DeleteStatus.
func (mr *MockRepositoryMockRecorder) DeleteStatus(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatus", reflect.TypeOf((*MockRepository)(nil).DeleteStatus), ctx, id)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, id int) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, id)
}

// GetByIDs mocks base method.
func (m *MockRepository) GetByIDs(ctx context.Context, ids []int) ([]*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDs", ctx, ids)
	ret0, _ := ret[0].([]*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockRepositoryMockRecorder) GetByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockRepository)(nil).GetByIDs), ctx, ids)
}

// GetByUID mocks base method.
func (m *MockRepository) GetByUID(ctx context.Context, uid string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUID", ctx, uid)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUID indicates an expected call of GetByUID.
func (mr *MockRepositoryMockRecorder) GetByUID(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUID", reflect.TypeOf((*MockRepository)(nil).GetByUID), ctx, uid)
}

// GetByUIDs mocks base method.
func (m *MockRepository) GetByUIDs(ctx context.Context, uids []string) ([]*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUIDs", ctx, uids)
	ret0, _ := ret[0].([]*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUIDs indicates an expected call of GetByUIDs.
func (mr *MockRepositoryMockRecorder) GetByUIDs(ctx, uids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUIDs", reflect.TypeOf((*MockRepository)(nil).GetByUIDs), ctx, uids)
}

// GetOnlineUsers mocks base method.
func (m *MockRepository) GetOnlineUsers(ctx context.Context) ([]*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineUsers", ctx)
	ret0, _ := ret[0].([]*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineUsers indicates an expected call of GetOnlineUsers.
func (mr *MockRepositoryMockRecorder) GetOnlineUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineUsers", reflect.TypeOf((*MockRepository)(nil).GetOnlineUsers), ctx)
}

// GetStatus mocks base method.
func (m *MockRepository) GetStatus(ctx context.Context, id int) (*Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, id)
	ret0, _ := ret[0].(*Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockRepositoryMockRecorder) GetStatus(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockRepository)(nil).GetStatus), ctx, id)
}

// GetStatuses mocks base method.
func (m *MockRepository) GetStatuses(ctx context.Context, ids []int) ([]*Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatuses", ctx, ids)
	ret0, _ := ret[0].([]*Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatuses indicates an expected call of GetStatuses.
func (mr *MockRepositoryMockRecorder) GetStatuses(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatuses", reflect.TypeOf((*MockRepository)(nil).GetStatuses), ctx, ids)
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, u *User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, u)
}

// SaveStatus mocks base method.
func (m *MockRepository) SaveStatus(ctx context.Context, id int, status *Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStatus indicates an expected call of SaveStatus.
func (mr *MockRepositoryMockRecorder) SaveStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStatus", reflect.TypeOf((*MockRepository)(nil).SaveStatus), ctx, id, status)
}
